$date
	Wed Feb  8 23:34:33 2012
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module top_tb $end
$var wire 32 ! dataadr [31:0] $end
$var wire 1 " memwrite $end
$var wire 32 # writedata [31:0] $end
$var reg 1 $ clk $end
$var reg 1 % reset $end
$scope module dut $end
$var wire 1 & clk $end
$var wire 32 ' dataadr [31:0] $end
$var wire 32 ( instr [31:0] $end
$var wire 1 " memwrite $end
$var wire 32 ) pc [31:0] $end
$var wire 32 * readdata [31:0] $end
$var wire 1 + reset $end
$var wire 32 , writedata [31:0] $end
$scope module mips $end
$var wire 3 - alucontrol [2:0] $end
$var wire 32 . aluout [31:0] $end
$var wire 1 / alusrc $end
$var wire 1 & clk $end
$var wire 32 0 instr [31:0] $end
$var wire 1 1 jump $end
$var wire 1 2 memtoreg $end
$var wire 1 " memwrite $end
$var wire 32 3 pc [31:0] $end
$var wire 1 4 pcsrc $end
$var wire 32 5 readdata [31:0] $end
$var wire 1 6 regdst $end
$var wire 1 7 regwrite $end
$var wire 1 + reset $end
$var wire 32 8 writedata [31:0] $end
$var wire 1 9 zero $end
$scope module c $end
$var wire 3 : alucontrol [2:0] $end
$var wire 2 ; aluop [1:0] $end
$var wire 1 / alusrc $end
$var wire 1 < branch $end
$var wire 6 = funct [5:0] $end
$var wire 1 1 jump $end
$var wire 1 2 memtoreg $end
$var wire 1 " memwrite $end
$var wire 6 > op [5:0] $end
$var wire 1 4 pcsrc $end
$var wire 1 6 regdst $end
$var wire 1 7 regwrite $end
$var wire 1 9 zero $end
$scope module md $end
$var wire 2 ? aluop [1:0] $end
$var wire 1 / alusrc $end
$var wire 1 < branch $end
$var wire 1 1 jump $end
$var wire 1 2 memtoreg $end
$var wire 1 " memwrite $end
$var wire 6 @ op [5:0] $end
$var wire 1 6 regdst $end
$var wire 1 7 regwrite $end
$var reg 9 A controls [8:0] $end
$upscope $end
$scope module ad $end
$var wire 2 B aluop [1:0] $end
$var wire 6 C funct [5:0] $end
$var reg 3 D alucontrol [2:0] $end
$upscope $end
$upscope $end
$scope module dp $end
$var wire 3 E alucontrol [2:0] $end
$var wire 32 F aluout [31:0] $end
$var wire 1 / alusrc $end
$var wire 1 & clk $end
$var wire 32 G instr [31:0] $end
$var wire 1 1 jump $end
$var wire 1 2 memtoreg $end
$var wire 32 H pc [31:0] $end
$var wire 32 I pcbranch [31:0] $end
$var wire 32 J pcnext [31:0] $end
$var wire 32 K pcnextbr [31:0] $end
$var wire 32 L pcplus1 [31:0] $end
$var wire 1 4 pcsrc $end
$var wire 32 M readdata [31:0] $end
$var wire 1 6 regdst $end
$var wire 1 7 regwrite $end
$var wire 1 + reset $end
$var wire 32 N result [31:0] $end
$var wire 32 O signimm [31:0] $end
$var wire 32 P srcA [31:0] $end
$var wire 32 Q srcB [31:0] $end
$var wire 32 R writedata [31:0] $end
$var wire 5 S writereg [4:0] $end
$var wire 1 9 zero $end
$scope module pcreg $end
$var wire 1 & clk $end
$var wire 32 T d [31:0] $end
$var wire 1 + reset $end
$var reg 32 U q [31:0] $end
$upscope $end
$scope module pcadd $end
$var wire 32 V a [31:0] $end
$var wire 32 W b [31:0] $end
$var wire 32 X sum [31:0] $end
$upscope $end
$scope module pcadd2 $end
$var wire 32 Y a [31:0] $end
$var wire 32 Z b [31:0] $end
$var wire 32 [ sum [31:0] $end
$upscope $end
$scope module pcbrmux $end
$var wire 32 \ out [31:0] $end
$var wire 32 ] q0 [31:0] $end
$var wire 32 ^ q1 [31:0] $end
$var wire 1 4 sel $end
$upscope $end
$scope module pcmux $end
$var wire 32 _ out [31:0] $end
$var wire 32 ` q0 [31:0] $end
$var wire 32 a q1 [31:0] $end
$var wire 1 1 sel $end
$upscope $end
$scope module rg $end
$var wire 5 b a1 [4:0] $end
$var wire 5 c a2 [4:0] $end
$var wire 5 d a3 [4:0] $end
$var wire 1 & clk $end
$var wire 32 e rd1 [31:0] $end
$var wire 32 f rd2 [31:0] $end
$var wire 32 g wr [31:0] $end
$var wire 1 7 wrenable $end
$upscope $end
$scope module wrmux $end
$var wire 5 h out [4:0] $end
$var wire 5 i q0 [4:0] $end
$var wire 5 j q1 [4:0] $end
$var wire 1 6 sel $end
$upscope $end
$scope module resmux $end
$var wire 32 k out [31:0] $end
$var wire 32 l q0 [31:0] $end
$var wire 32 m q1 [31:0] $end
$var wire 1 2 sel $end
$upscope $end
$scope module se $end
$var wire 16 n in [15:0] $end
$var wire 32 o out [31:0] $end
$upscope $end
$scope module srcbmux $end
$var wire 32 p out [31:0] $end
$var wire 32 q q0 [31:0] $end
$var wire 32 r q1 [31:0] $end
$var wire 1 / sel $end
$upscope $end
$scope module alu $end
$var wire 3 s aluControl [2:0] $end
$var wire 32 t srcA [31:0] $end
$var wire 32 u srcB [31:0] $end
$var reg 32 v ALUout [31:0] $end
$var reg 1 w zeroFlag $end
$upscope $end
$upscope $end
$upscope $end
$scope module imem $end
$var wire 6 x address [5:0] $end
$var wire 1 y instruction $end
$var wire 32 z out [31:0] $end
$upscope $end
$scope module dmem $end
$var wire 32 { address [31:0] $end
$var wire 1 & clk $end
$var wire 32 | rd [31:0] $end
$var wire 32 } wd [31:0] $end
$var wire 1 " we $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx }
b0 |
b0 {
bz z
xy
bz x
1w
b0 v
bx u
bx t
bx s
bz r
bx q
bx p
bz o
bz n
b0 m
b0 l
b0 k
bz j
bz i
bz h
bx g
bx f
bx e
bz d
bz c
bz b
bxzzzzzzzzzzzzzzzzzzzzzzzzzz a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bz Y
bx X
bz W
b1 V
b0 U
bz T
bz S
bx R
bx Q
bx P
bz O
b0 N
b0 M
bx L
bx K
bx J
bx I
bz H
bz G
b0 F
bx E
bx D
bz C
bx B
bx A
bz @
bx ?
bz >
bz =
x<
bx ;
bx :
19
bx 8
x7
x6
b0 5
x4
bz 3
x2
x1
bz 0
x/
b0 .
bx -
bx ,
1+
b0 *
bz )
bz (
b0 '
0&
1%
0$
bx #
x"
b0 !
$end
#5
1$
1&
#10
0$
0&
#15
1$
1&
#20
0$
0&
#25
bz U
1$
1&
0%
0+
#30
0$
0&
#35
1$
1&
#40
0$
0&
#45
1$
1&
#50
0$
0&
#55
1$
1&
#60
0$
0&
#65
1$
1&
#70
0$
0&
#75
1$
1&
#80
0$
0&
#85
1$
1&
#90
0$
0&
#95
1$
1&
#100
0$
0&
#105
1$
1&
#110
0$
0&
#115
1$
1&
#120
0$
0&
#125
1$
1&
#130
0$
0&
#135
1$
1&
#140
0$
0&
#145
1$
1&
#150
0$
0&
#155
1$
1&
#160
0$
0&
#165
1$
1&
#170
0$
0&
#175
1$
1&
#180
0$
0&
#185
1$
1&
#190
0$
0&
#195
1$
1&
#200
0$
0&
#205
1$
1&
#210
0$
0&
#215
1$
1&
#220
0$
0&
#225
1$
1&
#230
0$
0&
#235
1$
1&
#240
0$
0&
#245
1$
1&
#250
0$
0&
#255
1$
1&
#260
0$
0&
#265
1$
1&
#270
0$
0&
#275
1$
1&
#280
0$
0&
#285
1$
1&
#290
0$
0&
#295
1$
1&
#300
0$
0&
#305
1$
1&
#310
0$
0&
#315
1$
1&
#320
0$
0&
#325
1$
1&
#330
0$
0&
#335
1$
1&
#340
0$
0&
#345
1$
1&
#350
0$
0&
#355
1$
1&
#360
0$
0&
#365
1$
1&
#370
0$
0&
#375
1$
1&
#380
0$
0&
#385
1$
1&
#390
0$
0&
#395
1$
1&
#400
0$
0&
#405
1$
1&
#410
0$
0&
#415
1$
1&
#420
0$
0&
#425
1$
1&
#430
0$
0&
#435
1$
1&
#440
0$
0&
#445
1$
1&
#450
0$
0&
#455
1$
1&
#460
0$
0&
#465
1$
1&
#470
0$
0&
#475
1$
1&
#480
0$
0&
#485
1$
1&
#490
0$
0&
#495
1$
1&
#500
0$
0&
#505
1$
1&
#510
0$
0&
#515
1$
1&
#520
0$
0&
#525
1$
1&
#530
0$
0&
#535
1$
1&
#540
0$
0&
#545
1$
1&
#550
0$
0&
#555
1$
1&
#560
0$
0&
#565
1$
1&
#570
0$
0&
#575
1$
1&
#580
0$
0&
#585
1$
1&
#590
0$
0&
#595
1$
1&
#600
0$
0&
#605
1$
1&
#610
0$
0&
#615
1$
1&
#620
0$
0&
#625
1$
1&
#630
0$
0&
#635
1$
1&
#640
0$
0&
#645
1$
1&
#650
0$
0&
#655
1$
1&
#660
0$
0&
#665
1$
1&
#670
0$
0&
#675
1$
1&
#680
0$
0&
#685
1$
1&
#690
0$
0&
#695
1$
1&
#700
0$
0&
#705
1$
1&
#710
0$
0&
#715
1$
1&
#720
0$
0&
#725
1$
1&
#730
0$
0&
#735
1$
1&
#740
0$
0&
#745
1$
1&
#750
0$
0&
#755
1$
1&
#760
0$
0&
#765
1$
1&
#770
0$
0&
#775
1$
1&
#780
0$
0&
#785
1$
1&
#790
0$
0&
#795
1$
1&
#800
0$
0&
#805
1$
1&
#810
0$
0&
#815
1$
1&
#820
0$
0&
#825
1$
1&
#830
0$
0&
#835
1$
1&
#840
0$
0&
#845
1$
1&
#850
0$
0&
#855
1$
1&
#860
0$
0&
#865
1$
1&
#870
0$
0&
#875
1$
1&
#880
0$
0&
#885
1$
1&
#890
0$
0&
#895
1$
1&
#900
0$
0&
#905
1$
1&
#910
0$
0&
#915
1$
1&
#920
0$
0&
#925
1$
1&
#930
0$
0&
#935
1$
1&
#940
0$
0&
#945
1$
1&
#950
0$
0&
#955
1$
1&
#960
0$
0&
#965
1$
1&
#970
0$
0&
#975
1$
1&
#980
0$
0&
#985
1$
1&
#990
0$
0&
#995
1$
1&
#1000
$dumpoff
bx }
bx |
bx {
bx z
xy
bx x
xw
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
x<
bx ;
bx :
x9
bx 8
x7
x6
bx 5
x4
bx 3
x2
x1
bx 0
x/
bx .
bx -
bx ,
x+
bx *
bx )
bx (
bx '
x&
x%
x$
bx #
x"
bx !
$end
